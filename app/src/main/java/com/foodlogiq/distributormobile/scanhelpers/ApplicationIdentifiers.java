package com.foodlogiq.distributormobile.scanhelpers;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * Values used for GS1 byte translation.
 */
public final class ApplicationIdentifiers {
    public static final int CODE_A = 0;
    public static final int CODE_B = 1;
    public static final int CODE_C = 2;


    public static final Map<String, Integer> lengths = new HashMap<>();
    public static final Map<String, String> names = new HashMap<>();
    public static final Map<Integer, HashMap> values = new HashMap<>();
    public static final List<String> tripleAis = Arrays.asList("24", "25", "41", "41", "42", "71");
    public static final List<String> quadrupleAis = Arrays.asList("31", "32", "33", "34", "35",
            "36", "39", "70", "80", "81", "82");

    static {
        HashMap<String, String> aValues = new HashMap<>();
        aValues.put("00", "Space");
        aValues.put("01", "!");
        aValues.put("02", "\"");
        aValues.put("03", "#");
        aValues.put("04", "$");
        aValues.put("05", "%");
        aValues.put("06", "&");
        aValues.put("07", "'");
        aValues.put("08", "(");
        aValues.put("09", ")");
        aValues.put("10", "*");
        aValues.put("11", "+");
        aValues.put("12", ",");
        aValues.put("13", "-");
        aValues.put("14", ".");
        aValues.put("15", "/");
        aValues.put("16", "0");
        aValues.put("17", "1");
        aValues.put("18", "2");
        aValues.put("19", "3");
        aValues.put("20", "4");
        aValues.put("21", "5");
        aValues.put("22", "6");
        aValues.put("23", "7");
        aValues.put("24", "8");
        aValues.put("25", "9");
        aValues.put("26", ":");
        aValues.put("27", ";");
        aValues.put("28", "<");
        aValues.put("29", "=");
        aValues.put("30", ">");
        aValues.put("31", "?");
        aValues.put("32", "@");
        aValues.put("33", "A");
        aValues.put("34", "B");
        aValues.put("35", "C");
        aValues.put("36", "D");
        aValues.put("37", "E");
        aValues.put("38", "F");
        aValues.put("39", "G");
        aValues.put("40", "H");
        aValues.put("41", "I");
        aValues.put("42", "J");
        aValues.put("43", "K");
        aValues.put("44", "L");
        aValues.put("45", "M");
        aValues.put("46", "N");
        aValues.put("47", "O");
        aValues.put("48", "P");
        aValues.put("49", "Q");
        aValues.put("50", "R");
        aValues.put("51", "S");
        aValues.put("52", "T");
        aValues.put("53", "U");
        aValues.put("54", "V");
        aValues.put("55", "W");
        aValues.put("56", "X");
        aValues.put("57", "Y");
        aValues.put("58", "Z");
        aValues.put("59", "[");
        aValues.put("60", "\\");
        aValues.put("61", "]");
        aValues.put("62", "^");
        aValues.put("63", "_");
        aValues.put("64", "nul");
        aValues.put("65", "soh");
        aValues.put("66", "stx");
        aValues.put("67", "etx");
        aValues.put("68", "eot");
        aValues.put("69", "eno");
        aValues.put("70", "ack");
        aValues.put("71", "bel");
        aValues.put("72", "bs");
        aValues.put("73", "ht");
        aValues.put("74", "lf");
        aValues.put("75", "vt");
        aValues.put("76", "ff");
        aValues.put("77", "cr");
        aValues.put("78", "s0");
        aValues.put("79", "s1");
        aValues.put("80", "dle");
        aValues.put("81", "dc1");
        aValues.put("82", "dc2");
        aValues.put("83", "dc3");
        aValues.put("84", "dc4");
        aValues.put("85", "nak");
        aValues.put("86", "syn");
        aValues.put("87", "etb");
        aValues.put("88", "can");
        aValues.put("89", "em");
        aValues.put("90", "sub");
        aValues.put("91", "esc");
        aValues.put("92", "fs");
        aValues.put("93", "gs");
        aValues.put("94", "rs");
        aValues.put("95", "us");
        aValues.put("96", "fnc 3");
        aValues.put("97", "fnc 2");
        aValues.put("98", "Shift");
        aValues.put("99", "code C");
        aValues.put("100", "code B");
        aValues.put("101", "fnc 4");
        aValues.put("102", "fnc 1");
        aValues.put("103", "Start A");
        aValues.put("104", "Start B");
        aValues.put("105", "Start C");
        aValues.put("106", "Stop");

        HashMap<String, String> bValues = new HashMap<>();
        bValues.put("00", "Space");
        bValues.put("01", "!");
        bValues.put("02", "\"");
        bValues.put("03", "#");
        bValues.put("04", "$");
        bValues.put("05", "%");
        bValues.put("06", "&");
        bValues.put("07", "'");
        bValues.put("08", "(");
        bValues.put("09", ")");
        bValues.put("10", "*");
        bValues.put("11", "+");
        bValues.put("12", ",");
        bValues.put("13", "-");
        bValues.put("14", ".");
        bValues.put("15", "/");
        bValues.put("16", "0");
        bValues.put("17", "1");
        bValues.put("18", "2");
        bValues.put("19", "3");
        bValues.put("20", "4");
        bValues.put("21", "5");
        bValues.put("22", "6");
        bValues.put("23", "7");
        bValues.put("24", "8");
        bValues.put("25", "9");
        bValues.put("26", ":");
        bValues.put("27", ";");
        bValues.put("28", "<");
        bValues.put("29", "=");
        bValues.put("30", ">");
        bValues.put("31", "?");
        bValues.put("32", "@");
        bValues.put("33", "A");
        bValues.put("34", "B");
        bValues.put("35", "C");
        bValues.put("36", "D");
        bValues.put("37", "E");
        bValues.put("38", "F");
        bValues.put("39", "G");
        bValues.put("40", "H");
        bValues.put("41", "I");
        bValues.put("42", "J");
        bValues.put("43", "K");
        bValues.put("44", "L");
        bValues.put("45", "M");
        bValues.put("46", "N");
        bValues.put("47", "O");
        bValues.put("48", "P");
        bValues.put("49", "Q");
        bValues.put("50", "R");
        bValues.put("51", "S");
        bValues.put("52", "T");
        bValues.put("53", "U");
        bValues.put("54", "V");
        bValues.put("55", "W");
        bValues.put("56", "X");
        bValues.put("57", "Y");
        bValues.put("58", "Z");
        bValues.put("59", "[");
        bValues.put("60", "\\");
        bValues.put("61", "]");
        bValues.put("62", "^");
        bValues.put("63", "_");
        bValues.put("64", "`");
        bValues.put("65", "a");
        bValues.put("66", "b");
        bValues.put("67", "c");
        bValues.put("68", "d");
        bValues.put("69", "e");
        bValues.put("70", "f");
        bValues.put("71", "g");
        bValues.put("72", "h");
        bValues.put("73", "i");
        bValues.put("74", "j");
        bValues.put("75", "k");
        bValues.put("76", "l");
        bValues.put("77", "m");
        bValues.put("78", "n");
        bValues.put("79", "o");
        bValues.put("80", "p");
        bValues.put("81", "q");
        bValues.put("82", "r");
        bValues.put("83", "s");
        bValues.put("84", "t");
        bValues.put("85", "u");
        bValues.put("86", "v");
        bValues.put("87", "w");
        bValues.put("88", "x");
        bValues.put("89", "y");
        bValues.put("90", "z");
        bValues.put("91", "{");
        bValues.put("92", "|");
        bValues.put("93", "}");
        bValues.put("94", "~");
        bValues.put("95", "del");
        bValues.put("96", "fnc 3");
        bValues.put("97", "fnc2");
        bValues.put("98", "Shift");
        bValues.put("99", "code C");
        bValues.put("100", "fnc 4");
        bValues.put("101", "code A");
        bValues.put("102", "fnc 1");
        bValues.put("103", "Start A");
        bValues.put("104", "Start B");
        bValues.put("105", "Start C");
        bValues.put("106", "Stop");

        HashMap<String, String> cValues = new HashMap<>();
        cValues.put("00", "00");
        cValues.put("01", "01");
        cValues.put("02", "02");
        cValues.put("03", "03");
        cValues.put("04", "04");
        cValues.put("05", "05");
        cValues.put("06", "06");
        cValues.put("07", "07");
        cValues.put("08", "08");
        cValues.put("09", "09");
        cValues.put("10", "10");
        cValues.put("11", "11");
        cValues.put("12", "12");
        cValues.put("13", "13");
        cValues.put("14", "14");
        cValues.put("15", "15");
        cValues.put("16", "16");
        cValues.put("17", "17");
        cValues.put("18", "18");
        cValues.put("19", "19");
        cValues.put("20", "20");
        cValues.put("21", "21");
        cValues.put("22", "22");
        cValues.put("23", "23");
        cValues.put("24", "24");
        cValues.put("25", "25");
        cValues.put("26", "26");
        cValues.put("27", "27");
        cValues.put("28", "28");
        cValues.put("29", "29");
        cValues.put("30", "30");
        cValues.put("31", "31");
        cValues.put("32", "32");
        cValues.put("33", "33");
        cValues.put("34", "34");
        cValues.put("35", "35");
        cValues.put("36", "36");
        cValues.put("37", "37");
        cValues.put("38", "38");
        cValues.put("39", "39");
        cValues.put("40", "40");
        cValues.put("41", "41");
        cValues.put("42", "42");
        cValues.put("43", "43");
        cValues.put("44", "44");
        cValues.put("45", "45");
        cValues.put("46", "46");
        cValues.put("47", "47");
        cValues.put("48", "48");
        cValues.put("49", "49");
        cValues.put("50", "50");
        cValues.put("51", "51");
        cValues.put("52", "52");
        cValues.put("53", "53");
        cValues.put("54", "54");
        cValues.put("55", "55");
        cValues.put("56", "56");
        cValues.put("57", "57");
        cValues.put("58", "58");
        cValues.put("59", "59");
        cValues.put("60", "60");
        cValues.put("61", "61");
        cValues.put("62", "62");
        cValues.put("63", "63");
        cValues.put("64", "64");
        cValues.put("65", "65");
        cValues.put("66", "66");
        cValues.put("67", "67");
        cValues.put("68", "68");
        cValues.put("69", "69");
        cValues.put("70", "70");
        cValues.put("71", "71");
        cValues.put("72", "72");
        cValues.put("73", "73");
        cValues.put("74", "74");
        cValues.put("75", "75");
        cValues.put("76", "76");
        cValues.put("77", "77");
        cValues.put("78", "78");
        cValues.put("79", "79");
        cValues.put("80", "80");
        cValues.put("81", "81");
        cValues.put("82", "82");
        cValues.put("83", "83");
        cValues.put("84", "84");
        cValues.put("85", "85");
        cValues.put("86", "86");
        cValues.put("87", "87");
        cValues.put("88", "88");
        cValues.put("89", "89");
        cValues.put("90", "90");
        cValues.put("91", "91");
        cValues.put("92", "92");
        cValues.put("93", "93");
        cValues.put("94", "94");
        cValues.put("95", "95");
        cValues.put("96", "96");
        cValues.put("97", "97");
        cValues.put("98", "98");
        cValues.put("99", "99");
        cValues.put("100", "code B");
        cValues.put("101", "code A");
        cValues.put("102", "fnc 1");
        cValues.put("103", "Start A");
        cValues.put("104", "Start B");
        cValues.put("105", "Start C");
        cValues.put("106", "Stop");

        values.put(CODE_A, aValues);
        values.put(CODE_B, bValues);
        values.put(CODE_C, cValues);
    }

    //-1 implies variable length
    static {
        lengths.put("00", 18);
        lengths.put("01", 14);
        lengths.put("02", 14);
        lengths.put("10", 20);
        lengths.put("11", 6);
        lengths.put("12", 6);
        lengths.put("13", 6);
        lengths.put("15", 6);
        lengths.put("17", 6);
        lengths.put("20", 2);
        lengths.put("21", 20);
        lengths.put("30", 8);
        lengths.put("37", -1);
        lengths.put("310", 6);
        lengths.put("320", 6);
        lengths.put("412", 13);
    }

    static {
        names.put("00", "sscc");
        names.put("01", "gtin");
        names.put("02", "content");
        names.put("10", "batchLot");
        names.put("11", "packDate");
        names.put("12", "packDate");
        names.put("13", "packDate");
        names.put("15", "useThrough");
        names.put("17", "useThrough");
        names.put("20", "variant");
        names.put("21", "serial");
        names.put("30", "variableCount");
        names.put("37", "count");
        names.put("310", "netWeightKilo");
        names.put("320", "netWeightPounds");
        names.put("412", "purchaseFromGln");
    }
}
